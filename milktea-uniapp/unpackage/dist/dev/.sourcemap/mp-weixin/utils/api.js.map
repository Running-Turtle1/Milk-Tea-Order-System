{"version":3,"file":"api.js","sources":["utils/api.js"],"sourcesContent":["// api.js - 统一管理API请求\n\n// API基础URL\r\n// http://39.105.25.33:8081/api\tlocalhost:8081/api\nconst baseUrl = 'http://39.105.25.33:8081/api';\n\n// 获取基础URL - 便于后期可能的环境切换\nconst getBaseUrl = () => {\n  return baseUrl;\n};\n\n// 请求拦截器\nconst interceptors = {\n  request: null,\n  response: null\n};\n\n// 图片URL处理 - 添加时间戳破坏缓存\nconst processImageUrl = (url) => {\n  if (!url) return url;\n  // 只处理系统上传图片的URL\n  if (url.includes('/api/uploads/')) {\n    return url + (url.includes('?') ? '&' : '?') + 't=' + new Date().getTime();\n  }\n  return url;\n};\n\n// 设置请求拦截器\nconst setRequestInterceptor = (callback) => {\n  interceptors.request = callback;\n};\n\n// 设置响应拦截器\nconst setResponseInterceptor = (callback) => {\n  interceptors.response = callback;\n};\n\n// 统一请求方法\nconst request = (options) => {\n  // 默认配置\n  const defaultOptions = {\n    url: '',\n    method: 'GET',\n    data: {},\n    header: {\n      'content-type': 'application/json'\n    }\n  };\n\n  // 合并配置\n  let mergedOptions = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // 处理URL\n  if (!mergedOptions.url.startsWith('http')) {\n    mergedOptions.url = `${baseUrl}${mergedOptions.url.startsWith('/') ? '' : '/'}${mergedOptions.url}`;\n  }\n\n  // 添加token到请求头\n  const token = uni.getStorageSync('token');\n  if (token) {\n    // 检查token是否过期\n    try {\n      const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n      const expTime = tokenPayload.exp * 1000; // 转换为毫秒\n      const currentTime = new Date().getTime();\n      \n      // 如果token已过期或即将过期（5分钟内）\n      if (currentTime >= expTime - 300000) {\n        console.log('Token已过期或即将过期，跳转到登录页面');\n        \n        // 清除token\n        uni.removeStorageSync('token');\n        \n        // 显示提示\n        uni.showToast({\n          title: '登录已过期，请重新登录',\n          icon: 'none',\n          duration: 2000\n        });\n        \n        // 延迟跳转到登录页\n        setTimeout(() => {\n          uni.navigateTo({\n            url: '/pages/login/login'\n          });\n        }, 1500);\n        \n        // 终止请求\n        throw new Error('Token expired');\n      }\n      \n      // token有效，添加到请求头\n    mergedOptions.header = {\n      ...mergedOptions.header,\n      'Authorization': `Bearer ${token}`\n    };\n    } catch (e) {\n      console.error('Token解析错误:', e);\n      \n      // 解析错误也视为token无效，清除并跳转登录\n      if (e.message !== 'Token expired') {\n        uni.removeStorageSync('token');\n      }\n    }\n  }\n\n  // 请求拦截\n  if (interceptors.request) {\n    const interceptedOptions = interceptors.request(mergedOptions);\n    if (interceptedOptions) {\n      mergedOptions = interceptedOptions;\n    }\n  }\n\n  // 发起请求\n  return new Promise((resolve, reject) => {\n    uni.request({\n      ...mergedOptions,\n      success: (res) => {\n        // 检测HTML响应 - 通常表示被重定向到登录页面\n        if (typeof res.data === 'string' && res.data.includes('<!DOCTYPE html>')) {\n          console.error('收到HTML响应而非JSON数据，可能是认证问题');\n          \n          // 清除可能已失效的token\n          uni.removeStorageSync('token');\n          \n          // 创建一个模拟的401响应\n          const authErrorResponse = {\n            ...res,\n            statusCode: 401,\n            data: {\n              code: 401,\n              message: '请先登录或登录已过期'\n            }\n          };\n          \n          // 显示提示\n          uni.showToast({\n            title: '请先登录或登录已过期',\n            icon: 'none',\n            duration: 2000\n          });\n          \n          // 延迟跳转到登录页\n          setTimeout(() => {\n            uni.navigateTo({\n              url: '/pages/login/login'\n            });\n          }, 1500);\n          \n          resolve(authErrorResponse);\n          return;\n        }\n        \n        // 处理401错误（未授权）\n        if (res.statusCode === 401 || (res.data && res.data.code === 401)) {\n          // 清除token\n          uni.removeStorageSync('token');\n          uni.showToast({\n            title: '登录已过期，请重新登录',\n            icon: 'none'\n          });\n          setTimeout(() => {\n            uni.navigateTo({\n              url: '/pages/login/login'\n            });\n          }, 1500);\n        }\n        \n        // 响应拦截\n        if (interceptors.response) {\n          const interceptedRes = interceptors.response(res);\n          if (interceptedRes) {\n            resolve(interceptedRes);\n            return;\n          }\n        }\n        resolve(res);\n      },\n      fail: (err) => {\n        console.error('请求失败:', err);\n        reject(err);\n      }\n    });\n  });\n};\n\n// API方法\nconst api = {\n  // 获取门店信息\n  getShopInfo: () => {\n    return request({\n      url: '/shop/info',\n      method: 'GET'\n    });\n  },\n\n  // 商品分类\n  getCategories: () => {\n    return request({\n      url: '/product/categories',\n      method: 'GET'\n    });\n  },\n  \n  // 获取分类商品\n  getCategoryProducts: (categoryId, page, size) => {\n    return request({\n      url: '/product/list',\n      method: 'GET',\n      data: {\n        categoryId,\n        page,\n        size\n      }\n    });\n  },\n  \n  // 获取推荐商品\n  getRecommendProducts: () => {\n    return request({\n      url: '/product/recommend',\n      method: 'GET'\n    });\n  },\n  \n  // 获取商品详情\n  getProductDetail: (productId) => {\n    return request({\n      url: `/product/detail/${productId}`,\n      method: 'GET'\n    });\n  },\n  \n  // 获取配料列表\n  getIngredients: () => {\n    return request({\n      url: '/ingredient/list',\n      method: 'GET'\n    });\n  },\n  \n  // 登录\n  login: (username, password) => {\n    return request({\n      url: '/user/login',\n      method: 'POST',\n      data: {\n        username,\n        password\n      }\n    });\n  },\n  \n  // 注册\n  register: (userData) => {\n    return request({\n      url: '/user/register',\n      method: 'POST',\n      data: userData\n    });\n  },\n  \n  // 获取用户信息\n  getUserInfo: () => {\n    return request({\n      url: '/user/profile',\n      method: 'GET'\n    });\n  },\n  \n  // 更新用户信息\n  updateUserInfo: (userInfo) => {\n    return request({\n      url: '/user/update',\n      method: 'POST',\n      data: userInfo\n    });\n  },\n  \n  // 上传头像\n  uploadAvatar: (filePath) => {\n    return new Promise((resolve, reject) => {\n      // 获取token\n      const token = uni.getStorageSync('token');\n      \n      uni.uploadFile({\n        url: `${baseUrl}/files/avatar`,\n        filePath: filePath,\n        name: 'file',\n        header: token ? { 'Authorization': `Bearer ${token}` } : {},\n        success: (res) => {\n          if (typeof res.data === 'string') {\n            try {\n              const data = JSON.parse(res.data);\n              resolve(data);\n            } catch (e) {\n              resolve(res.data);\n            }\n          } else {\n            resolve(res.data);\n          }\n        },\n        fail: (err) => {\n          reject(err);\n        }\n      });\n    });\n  },\n  \n  // 提交订单\n  createOrder: (orderData) => {\n    return request({\n      url: '/order/create',\n      method: 'POST',\n      data: orderData\n    });\n  },\n  \n  // 获取订单列表\n  getOrders: (status, page, size) => {\n    // 创建请求数据对象\n    const requestData = {\n      page,\n      size\n    };\n    \n    // 只有当status不是null或undefined时才添加到请求数据\n    if (status !== null && status !== undefined) {\n      requestData.status = status;\n    }\n    \n    return request({\n      url: '/order/list',\n      method: 'GET',\n      data: requestData\n    });\n  },\n  \n  // 获取订单详情\n  getOrderDetail: (orderNo) => {\n    return request({\n      url: `/order/detail/${orderNo}`,\n      method: 'GET'\n    });\n  },\n  \n  // 取消订单\n  cancelOrder: (orderNo) => {\n    return request({\n      url: `/order/cancel/${orderNo}`,\n      method: 'POST'\n    });\n  },\n  \n  // 支付订单\n  payOrder: (orderNo, paymentMethod) => {\n    console.log('API开始调用支付接口，支付方式:', paymentMethod, '订单号:', orderNo);\n    return request({\n      url: `/order/pay/${orderNo}?paymentMethod=${paymentMethod}`,\n      method: 'POST',\n      data: {}\n    });\n  },\n  \n  // 获取积分记录\n  getPointsRecords: (page, size) => {\n    return request({\n      url: '/user/points/records',\n      method: 'GET',\n      data: {\n        page,\n        size\n      }\n    });\n  },\n  \n  // 获取优惠券列表\n  getCoupons: (status) => {\n    return request({\n      url: '/user/coupons',\n      method: 'GET',\n      data: {\n        status\n      }\n    });\n  },\n  \n  // 兑换优惠券\n  exchangeCoupon: (code) => {\n    return request({\n      url: '/user/exchange-coupon',\n      method: 'POST',\n      data: {\n        code\n      }\n    });\n  },\n  \n  // 刷新优惠券状态\n  refreshCoupons: () => {\n    return request({\n      url: '/user/coupons',\n      method: 'GET'\n    });\n  },\n  \n  // 获取购物车信息\n  getCart: () => {\n    return request({\n      url: '/cart',\n      method: 'GET'\n    });\n  },\n  \n  // 清空已选择的购物车商品\n  clearSelectedCartItems: () => {\n    return request({\n      url: '/cart/selected',\n      method: 'DELETE'\n    });\n  },\n  \n  // 验证购物车库存\n  verifyCartStock: () => {\n    return request({\n      url: '/cart/verify-stock',\n      method: 'GET'\n    });\n  },\n  \n  // 删除订单\n  deleteOrder: (orderNo) => {\n    return request({\n      url: `/order/${orderNo}`,\n      method: 'DELETE'\n    });\n  },\n  \n  // 申请退款\n  applyRefund: (refundData) => {\n    return request({\n      url: '/refund/apply',\n      method: 'POST',\n      data: refundData\n    });\n  },\n  \n  // 获取会员信息\n  getMemberInfo: () => {\n    return request({\n      url: '/member/info',\n      method: 'GET'\n    });\n  }\n};\n\nexport default {\n  baseUrl,\n  getBaseUrl,\n  request,\n  processImageUrl,\n  setRequestInterceptor,\n  setResponseInterceptor,\n  ...api\n}; "],"names":["uni"],"mappings":"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"}