{"version":3,"file":"cache-control.js","sources":["utils/cache-control.js"],"sourcesContent":["/**\r\n * 缓存控制工具 - 主要用于H5环境\r\n */\r\n\r\n// 检测是否为H5环境\r\nconst isH5 = function() {\r\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\r\n};\r\n\r\n// 注销Service Worker（如果存在）\r\nconst unregisterServiceWorkers = function() {\r\n  if (!isH5() || !navigator.serviceWorker) return;\r\n  \r\n  navigator.serviceWorker.getRegistrations().then((registrations) => {\r\n    for (let registration of registrations) {\r\n      console.log('发现Service Worker，正在卸载:', registration.scope);\r\n      registration.unregister().then((success) => {\r\n        if (success) {\r\n          console.log('Service Worker卸载成功');\r\n        } else {\r\n          console.warn('Service Worker卸载失败');\r\n        }\r\n      });\r\n    }\r\n  }).catch((err) => {\r\n    console.error('检查Service Worker失败:', err);\r\n  });\r\n};\r\n\r\n// 设置缓存控制元标签\r\nconst setupCacheControlMeta = function() {\r\n  if (!isH5()) return;\r\n  \r\n  const metaTags = [\r\n    { httpEquiv: 'Cache-Control', content: 'no-cache, no-store, must-revalidate' },\r\n    { httpEquiv: 'Pragma', content: 'no-cache' },\r\n    { httpEquiv: 'Expires', content: '0' }\r\n  ];\r\n  \r\n  metaTags.forEach((meta) => {\r\n    const existingMeta = document.querySelector(`meta[http-equiv=\"${meta.httpEquiv}\"]`);\r\n    if (!existingMeta) {\r\n      const metaElement = document.createElement('meta');\r\n      metaElement.httpEquiv = meta.httpEquiv;\r\n      metaElement.content = meta.content;\r\n      document.head.appendChild(metaElement);\r\n    }\r\n  });\r\n};\r\n\r\n// 设置存储类型变更监听器\r\nconst setupReloadListener = function() {\r\n  if (!isH5()) return;\r\n  \r\n  window.addEventListener('storage', (event) => {\r\n    if (event.key === 'storageTypeChanged' && event.newValue === 'true') {\r\n      console.log('检测到存储类型变更，准备重载页面');\r\n      \r\n      uni.showToast({\r\n        title: '应用已更新，正在刷新',\r\n        icon: 'none',\r\n        duration: 2000\r\n      });\r\n      \r\n      // 移除标记，避免重复触发\r\n      localStorage.removeItem('storageTypeChanged');\r\n      \r\n      // 延迟重载页面\r\n      setTimeout(() => {\r\n        window.location.reload(true);\r\n      }, 1500);\r\n    }\r\n  });\r\n};\r\n\r\n// 设置请求拦截器，添加缓存控制头\r\nconst setupRequestHeaders = function() {\r\n  if (!isH5()) return;\r\n  \r\n  // 重写fetch API\r\n  const originalFetch = window.fetch;\r\n  window.fetch = function(input, init) {\r\n    init = init || {};\r\n    init.headers = init.headers || {};\r\n    \r\n    // 添加缓存控制头\r\n    const cacheHeaders = {\r\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n      'Pragma': 'no-cache',\r\n      'Expires': '0'\r\n    };\r\n    \r\n    if (init.headers instanceof Headers) {\r\n      Object.keys(cacheHeaders).forEach(key => {\r\n        if (!init.headers.has(key)) {\r\n          init.headers.append(key, cacheHeaders[key]);\r\n        }\r\n      });\r\n    } else {\r\n      init.headers = Object.assign({}, cacheHeaders, init.headers);\r\n    }\r\n    \r\n    // 处理图片URL请求，添加时间戳\r\n    if (typeof input === 'string' && \r\n        (input.includes('.jpg') || input.includes('.png') || \r\n         input.includes('.gif') || input.includes('.jpeg'))) {\r\n      const separator = input.includes('?') ? '&' : '?';\r\n      input = `${input}${separator}t=${Date.now()}&r=${Math.random()}`;\r\n    }\r\n    \r\n    return originalFetch.call(this, input, init);\r\n  };\r\n  \r\n  // 重写XMLHttpRequest\r\n  const originalOpen = XMLHttpRequest.prototype.open;\r\n  XMLHttpRequest.prototype.open = function(method, url, async, user, password) {\r\n    this._url = url;\r\n    \r\n    // 处理图片URL请求，添加时间戳\r\n    if (typeof url === 'string' && \r\n        (url.includes('.jpg') || url.includes('.png') || \r\n         url.includes('.gif') || url.includes('.jpeg'))) {\r\n      const separator = url.includes('?') ? '&' : '?';\r\n      url = `${url}${separator}t=${Date.now()}&r=${Math.random()}`;\r\n    }\r\n    \r\n    return originalOpen.call(this, method, url, async === undefined ? true : async, user, password);\r\n  };\r\n  \r\n  const originalSend = XMLHttpRequest.prototype.send;\r\n  XMLHttpRequest.prototype.send = function(body) {\r\n    // 添加缓存控制头\r\n    this.setRequestHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\r\n    this.setRequestHeader('Pragma', 'no-cache');\r\n    this.setRequestHeader('Expires', '0');\r\n    \r\n    return originalSend.call(this, body);\r\n  };\r\n};\r\n\r\n// 尝试清除浏览器缓存（仅限H5）\r\nconst clearBrowserCache = function() {\r\n  if (!isH5()) return;\r\n  \r\n  try {\r\n    // 清除Cache API缓存\r\n    if (window.caches) {\r\n      caches.keys().then(cacheNames => {\r\n        cacheNames.forEach(cacheName => {\r\n          caches.delete(cacheName).then(() => {\r\n            console.log(`Cache ${cacheName} 已删除`);\r\n          });\r\n        });\r\n      });\r\n    }\r\n    \r\n    // 强制刷新页面\r\n    if (window.location.reload) {\r\n      console.log('执行强制刷新');\r\n      window.location.reload(true);\r\n    }\r\n  } catch (e) {\r\n    console.error('清除缓存失败:', e);\r\n  }\r\n};\r\n\r\n// 强制刷新特定图片的缓存\r\nconst forceRefreshImageCache = function(imageUrl) {\r\n  if (!isH5() || !imageUrl) return;\r\n  \r\n  try {\r\n    // 查找所有包含该图片URL的图片元素\r\n    const images = document.querySelectorAll('img');\r\n    \r\n    // 处理图片URL\r\n    const isImageFile = imageUrl.includes('.jpg') || imageUrl.includes('.png') || \r\n                        imageUrl.includes('.jpeg') || imageUrl.includes('.gif');\r\n    const cleanImageUrl = isImageFile ? imageUrl.split('?')[0] : imageUrl;\r\n    \r\n    // 找到匹配的图片元素\r\n    let foundImages = [];\r\n    images.forEach(img => {\r\n      if (img.src && img.src.includes(cleanImageUrl)) {\r\n        foundImages.push(img);\r\n      }\r\n    });\r\n    \r\n    console.log(`找到 ${foundImages.length} 个匹配图片元素，URL包含: ${cleanImageUrl}`);\r\n    \r\n    // 刷新找到的图片\r\n    foundImages.forEach(img => {\r\n      const originalSrc = img.src;\r\n      \r\n      // 清空src以强制重新加载\r\n      img.src = '';\r\n      \r\n      // 使用fetch预加载\r\n      fetch(originalSrc + (originalSrc.includes('?') ? '&' : '?') + 't=' + Date.now() + '&r=' + Math.random(), {\r\n        method: 'GET',\r\n        headers: {\r\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n          'Pragma': 'no-cache',\r\n          'Expires': '0'\r\n        },\r\n        cache: 'no-store'\r\n      })\r\n      .then(response => response.blob())\r\n      .then(blob => {\r\n        // 创建blob URL\r\n        const blobUrl = URL.createObjectURL(blob);\r\n        img.src = blobUrl;\r\n        \r\n        // 管理blob URL\r\n        if (!window._blobUrlMap) window._blobUrlMap = {};\r\n        if (window._blobUrlMap[cleanImageUrl]) {\r\n          URL.revokeObjectURL(window._blobUrlMap[cleanImageUrl]);\r\n        }\r\n        window._blobUrlMap[cleanImageUrl] = blobUrl;\r\n        \r\n        console.log('已为图片创建新的Blob URL:', blobUrl);\r\n      })\r\n      .catch(err => {\r\n        console.error('刷新图片失败:', err);\r\n        img.src = originalSrc;  // 恢复原始src\r\n      });\r\n    });\r\n    \r\n    // 如果没有找到图片元素，但提供的URL是图片文件，执行预加载\r\n    if (foundImages.length === 0 && isImageFile) {\r\n      console.log('未找到匹配的图片元素，执行预加载');\r\n      \r\n      const timestamp = Date.now();\r\n      const random = Math.random();\r\n      const urlWithParams = imageUrl + (imageUrl.includes('?') ? '&' : '?') + 't=' + timestamp + '&r=' + random;\r\n      \r\n      fetch(urlWithParams, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n          'Pragma': 'no-cache',\r\n          'Expires': '0'\r\n        },\r\n        cache: 'no-store'\r\n      })\r\n      .then(response => response.blob())\r\n      .then(blob => {\r\n        // 创建和管理blob URL\r\n        if (!window._blobUrlMap) window._blobUrlMap = {};\r\n        if (window._blobUrlMap[cleanImageUrl]) {\r\n          URL.revokeObjectURL(window._blobUrlMap[cleanImageUrl]);\r\n        }\r\n        \r\n        const blobUrl = URL.createObjectURL(blob);\r\n        window._blobUrlMap[cleanImageUrl] = blobUrl;\r\n        \r\n        console.log('已预加载图片并创建Blob URL:', blobUrl);\r\n        \r\n        // 可选：将图片保存到本地存储，用于离线访问\r\n        try {\r\n          const reader = new FileReader();\r\n          reader.onload = (e) => {\r\n            const base64 = e.target.result;\r\n            uni.setStorageSync('avatarImageCache', {\r\n              url: imageUrl,\r\n              data: base64,\r\n              timestamp: Date.now()\r\n            });\r\n            console.log('图片已更新到本地缓存');\r\n          };\r\n          reader.readAsDataURL(blob);\r\n        } catch (e) {\r\n          console.error('保存图片到本地缓存失败:', e);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error('预加载图片失败:', err);\r\n      });\r\n    }\r\n    \r\n    return true;\r\n  } catch (e) {\r\n    console.error('刷新图片缓存失败:', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 初始化缓存控制\r\nconst initCacheControl = function() {\r\n  if (!isH5()) {\r\n    console.log('非H5环境，跳过缓存控制初始化');\r\n    return;\r\n  }\r\n  \r\n  console.log('初始化H5环境缓存控制');\r\n  \r\n  // 注销Service Worker\r\n  unregisterServiceWorkers();\r\n  \r\n  // 设置缓存控制元标签\r\n  setupCacheControlMeta();\r\n  \r\n  // 设置存储变更监听器\r\n  setupReloadListener();\r\n  \r\n  // 设置请求拦截器\r\n  setupRequestHeaders();\r\n  \r\n  // 初始化blob URL映射表\r\n  if (typeof window !== 'undefined') {\r\n    window._blobUrlMap = {};\r\n  }\r\n  \r\n  // 页面卸载时清理blob URL\r\n  window.addEventListener('beforeunload', () => {\r\n    if (window._blobUrlMap) {\r\n      Object.values(window._blobUrlMap).forEach(url => {\r\n        try {\r\n          URL.revokeObjectURL(url);\r\n        } catch (e) {\r\n          console.error('释放Blob URL失败:', e);\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexport default {\r\n  initCacheControl,\r\n  setupCacheControlMeta,\r\n  setupReloadListener,\r\n  setupRequestHeaders,\r\n  forceRefreshImageCache,\r\n  clearBrowserCache,\r\n  unregisterServiceWorkers\r\n}; "],"names":["uni"],"mappings":"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"}